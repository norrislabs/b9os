#!/usr/bin/env python3

import os
import logging
import signal
import argparse
from colorama import Fore

from reportlab.lib.pagesizes import LETTER
from reportlab.lib.units import inch
from reportlab.pdfgen.canvas import Canvas

import b9py

_pdf_canvas = None
_pdf_pages = []
_nocolor = False

_srv_topics = []
_topics = []


# Control-C handler
def shutdown_handler(_sig, _frame):
    os.kill(os.getpid(), signal.SIGKILL)


def failed(result):
    print("Registration service has failed. {}".format(result.status_type), end="\r\n")
    os.kill(os.getpid(), signal.SIGKILL)


def pagebreak():
    global _pdf_canvas
    global _pdf_pages

    if _pdf_canvas:
        new_page()
    else:
        linefeed(2)


def end_doc():
    new_page(False)


def new_page(create_new=True):
    global _pdf_canvas
    global _pdf_pages

    if len(_pdf_pages) > 0:
        prev_page = _pdf_pages[-1]
        _pdf_canvas.drawText(prev_page)
        _pdf_canvas.showPage()

    if create_new:
        next_page = _pdf_canvas.beginText()

        next_page.setTextOrigin((8.0 * inch) / 2, 0.25 * inch)
        next_page.setFont("Courier", 6)
        next_page.textLine("Page: {}".format(len(_pdf_pages) + 1))

        print("Page: {}".format(len(_pdf_pages) + 1))

        next_page.setTextOrigin(0.25 * inch, 10.75 * inch)
        next_page.setFont("Courier", 9)
        _pdf_pages.append(next_page)


def output(text):
    global _pdf_canvas
    global _pdf_pages

    if _pdf_canvas:
        current_page = _pdf_pages[-1]
        current_page.textLine(text)
    else:
        print(text, end="\r\n")


def linefeed(count=1):
    for ff in range(count):
        output("")


def print_node_registrations(items):
    title = '------ Nodes '
    output('{}{}'.format(title, '-' * (145 - len(title))))
    fmt = "{:42}{:16}{:16}{:8}"
    output(fmt.format('Name',
                      'Host',
                      'IP',
                      'PID'))
    output('-' * 145)

    sorted_nodes = dict(sorted(items, key=lambda i: (i[1][0]['host'], i[1][0]['nodename'])))
    last_host = None
    for item in sorted_nodes:
        regspec = dict(items)[item][0]
        if last_host and regspec['host'] != last_host:
            linefeed(1)
        output(fmt.format(regspec['nodename'],
                          regspec['host'],
                          str(regspec['IP']),
                          str(regspec['pid'])))
        last_host = regspec['host']


def print_node_registrations_simple(items):
    title = '------ Nodes '
    output('{}{}'.format(title, '-' * (105 - len(title))))
    fmt = "{:42}{:16}"
    output(fmt.format('Name', 'Host'))
    output('-' * 105)

    sorted_nodes = dict(sorted(items, key=lambda i: (i[1][0]['host'], i[1][0]['nodename'])))
    last_host = None
    for item in sorted_nodes:
        regspec = dict(items)[item][0]
        if last_host and regspec['host'] != last_host:
            linefeed(1)
        output(fmt.format(regspec['nodename'],
                          regspec['host']))
        last_host = regspec['host']


def print_topic_registrations(regtype, items, nodename=None):
    if regtype == 'pub':
        title = '------ Publishers '
    else:
        title = '------ Subscribers '

    if _nocolor:
        color = ''
    else:
        color = Fore.RESET

    output('{}{}'.format(title, '-' * (145 - len(title))))
    fmt = "{}{:42}{:16}{:16}{:8}{:34}{}" + color
    output(fmt.format(color,
                      'Topic',
                      'Message_Type',
                      'IP',
                      'Port',
                      'Node_Name',
                      'Node_Host'))
    output('-' * 145)

    sorted_topics = dict(sorted(items, key=lambda i: i[0]))
    topic_count = 0
    for item in sorted_topics:
        regspecs = dict(items)[item]
        for regspec in regspecs:
            if not (regspec['nodename'].endswith('_cli') and regtype == "sub"):
                if nodename is None or nodename.lower() == regspec['nodename'].lower():
                    if regtype == "sub" or "/action/" not in regspec['topic']:
                        topic_count += 1
                        if regspec['message_type'] is None:
                            msgtype = "Any"
                        else:
                            msgtype = regspec['message_type']

                        if 'has_publisher' in regspec.keys() and not regspec['has_publisher']:
                            ip = "-" * 14
                            the_port = "-" * 4
                            if not _nocolor:
                                color = Fore.YELLOW
                        else:
                            ip = regspec['IP']
                            the_port = str(regspec['port'])
                            if not _nocolor:
                                color = Fore.RESET

                        output(fmt.format(color,
                                          regspec['topic'],
                                          msgtype,
                                          ip,
                                          the_port,
                                          regspec['nodename'],
                                          regspec['owner_host'] + "/" + regspec['owner_ip']))
    if topic_count == 0:
        if regtype == 'pub':
            output("No publishers provided by this node.")
        else:
            output("No subscribers for this node.")


def print_topic_registrations_simple(regtype, items, nodename=None):
    if regtype == 'pub':
        title = '------ Publishers '
    else:
        title = '------ Subscribers '

    if _nocolor:
        color = ''
    else:
        color = Fore.RESET

    output('{}{}'.format(title, '-' * (105 - len(title))))
    fmt = "{}{:42}{:16}{:34}{}" + color
    output(fmt.format(color,
                      'Topic',
                      'Message_Type',
                      'Node_Name',
                      'Node_Host'))
    output('-' * 105)

    sorted_topics = dict(sorted(items, key=lambda i: i[0]))
    topic_count = 0
    for item in sorted_topics:
        regspecs = dict(items)[item]
        for regspec in regspecs:
            if not (regspec['nodename'].endswith('_cli') and regtype == "sub"):
                if nodename is None or nodename.lower() == regspec['nodename'].lower():
                    if regtype == "sub" or "/action/" not in regspec['topic']:
                        topic_count += 1
                        if regspec['message_type'] is None:
                            msgtype = "Any"
                        else:
                            msgtype = regspec['message_type']

                        if 'has_publisher' in regspec.keys() and not regspec['has_publisher']:
                            if not _nocolor:
                                color = Fore.YELLOW
                        else:
                            if not _nocolor:
                                color = Fore.RESET

                        output(fmt.format(color,
                                          regspec['topic'],
                                          msgtype,
                                          regspec['nodename'],
                                          regspec['owner_host']))
    if topic_count == 0:
        if regtype == 'pub':
            output("No publishers provided by this node.")
        else:
            output("No subscribers for this node.")


def print_service_registrations(items, nodename=None):
    title = '------ Services '
    output('{}{}'.format(title, '-' * (146 - len(title))))
    fmt = "{:42}{:18}{:16}{:8}{:34}{}"
    output(fmt.format('Topic',
                      'Message_Type',
                      'IP',
                      'Port',
                      'Node_Name',
                      'Node_Host'))
    output('-' * 146)

    sorted_topics = dict(sorted(items, key=lambda i: i[0]))
    srv_count = 0
    for item in sorted_topics:
        regspecs = dict(items)[item]
        for regspec in regspecs:
            if not regspec['nodename'].endswith('_cli'):
                if nodename is None or nodename.lower() == regspec['nodename'].lower():
                    if "/action/" not in regspec['topic']:
                        srv_count += 1
                        if regspec['message_type'] is None:
                            msgtype = "Any"
                        else:
                            msgtype = regspec['message_type']

                        if regspec['ret_msg_type'] is None:
                            retmsgtype = "Any"
                        else:
                            retmsgtype = regspec['ret_msg_type']

                        output(fmt.format(regspec['topic'],
                                          msgtype + "/" + retmsgtype,
                                          regspec['IP'],
                                          str(regspec['port']),
                                          regspec['nodename'],
                                          regspec['owner_host'] + "/" + regspec['owner_ip']))
    if srv_count == 0:
        output("No services provided by this node.")


def print_service_registrations_simple(items, nodename=None):
    title = '------ Services '
    output('{}{}'.format(title, '-' * (105 - len(title))))
    fmt = "{:42}{:18}{:31}{}"
    output(fmt.format('Topic',
                      'Message_Type',
                      'Node_Name',
                      'Node_Host'))
    output('-' * 105)

    sorted_topics = dict(sorted(items, key=lambda i: i[0]))
    srv_count = 0
    for item in sorted_topics:
        regspecs = dict(items)[item]
        for regspec in regspecs:
            if not (regspec['nodename'].endswith('_cli')):
                if nodename is None or nodename.lower() == regspec['nodename'].lower():
                    if "/action/" not in regspec['topic']:
                        srv_count += 1
                        if regspec['message_type'] is None:
                            msgtype = "Any"
                        else:
                            msgtype = regspec['message_type']

                        if regspec['ret_msg_type'] is None:
                            retmsgtype = "Any"
                        else:
                            retmsgtype = regspec['ret_msg_type']

                        output(fmt.format(regspec['topic'],
                                          msgtype + '/' + retmsgtype,
                                          regspec['nodename'],
                                          regspec['owner_host']))
    if srv_count == 0:
        output("No services provided by this node.")


def print_parameters(title, items, verbose):
    width = 145 if verbose else 105
    title = '------ Parameters in ' + title + " "
    output('{}{}'.format(title, '-' * (width - len(title))))
    fmt = "{:42}{:16}{:28}{}"
    output(fmt.format('Namespace',
                      'Type',
                      'Name',
                      'Value'))
    output('-' * width)

    for reg in items:
        output(fmt.format(reg['namespace'], reg['type'], reg['name'], reg['value']))


def print_parameter_server(title, verbose, parameter_topic=None):
    param_client = b9.create_parameter_client(b9.nodename, '@', parameter_topic)
    r = param_client.list()
    if not r.is_successful:
        failed(r)
    else:
        print_parameters(title, r.result_data.data, verbose)


def is_action_service(action_topic: str):
    names = action_topic.split('/')
    if names[2] == "action" and names[-1] in ['start', 'stop', 'pause']:
        return names[3]
    else:
        return None


def is_action_topic(action_topic: str):
    names = action_topic.split('/')
    if names[2] == "action" and names[-1] == 'status':
        return names[3]
    else:
        return None


def print_action_services(items, nodename=None):
    global _srv_topics

    title = '------ Action Services '
    output('{}{}'.format(title, '-' * (146 - len(title))))
    fmt = "{:42}{:18}{:16}{:8}{:34}{}"
    output(fmt.format('Topic',
                      'Message_Type',
                      'IP',
                      'Port',
                      'Node_Name',
                      'Node_Host'))
    output('-' * 146)

    srv_count = 0
    sorted_topics = dict(sorted(items, key=lambda i: i[0]))
    for item in sorted_topics:
        regspecs = dict(items)[item]
        for regspec in regspecs:
            if not (regspec['nodename'].endswith('_cli')):
                if nodename is None or nodename.lower() == regspec['nodename'].lower():
                    if regspec['message_type'] is None:
                        msgtype = "Any"
                    else:
                        msgtype = regspec['message_type']

                    if regspec['ret_msg_type'] is None:
                        retmsgtype = "Any"
                    else:
                        retmsgtype = regspec['ret_msg_type']

                    if is_action_service(regspec['topic']):
                        srv_count += 1
                        output(fmt.format(regspec['topic'],
                                          msgtype + '/' + retmsgtype,
                                          regspec['IP'],
                                          str(regspec['port']),
                                          regspec['nodename'],
                                          regspec['owner_host'] + "/" + regspec['owner_ip']))

    if srv_count == 0:
        output("No actions provided by this node.")


def print_action_services_simple(items, nodename=None):
    title = '------ Action Services '
    output('{}{}'.format(title, '-' * (105 - len(title))))
    fmt = "{:42}{:18}{:31}{}"
    output(fmt.format('Topic',
                      'Message_Type',
                      'Node_Name',
                      'Node_Host'))
    output('-' * 105)

    srv_count = 0
    sorted_topics = dict(sorted(items, key=lambda i: i[0]))
    for item in sorted_topics:
        regspecs = dict(items)[item]
        for regspec in regspecs:
            if not (regspec['nodename'].endswith('_cli')):
                if nodename is None or nodename.lower() == regspec['nodename'].lower():
                    if regspec['message_type'] is None:
                        msgtype = "Any"
                    else:
                        msgtype = regspec['message_type']

                    if regspec['ret_msg_type'] is None:
                        retmsgtype = "Any"
                    else:
                        retmsgtype = regspec['ret_msg_type']

                    if is_action_service(regspec['topic']):
                        srv_count += 1
                        output(fmt.format(regspec['topic'],
                                          msgtype + '/' + retmsgtype,
                                          regspec['nodename'],
                                          regspec['owner_host']))

    if srv_count == 0:
        output("No actions provided by this node.")


def print_action_status_topics(items, nodename=None):
    title = '------ Action Status Publishers '
    print('{}{}'.format(title, '-' * (145 - len(title))))
    fmt = "{:42}{:18}{:16}{:8}{:34}{}"
    output(fmt.format('Topic',
                      'Message_Type',
                      'IP',
                      'Port',
                      'Node_Name',
                      'Node_Host'))
    print('-' * 145)

    topic_count = 0
    sorted_topics = dict(sorted(items, key=lambda i: i[0]))
    for item in sorted_topics:
        regspecs = dict(items)[item]
        for regspec in regspecs:
            if not regspec['nodename'].endswith('_cli'):
                if nodename is None or nodename.lower() == regspec['nodename'].lower():
                    if regspec['message_type'] is None:
                        msgtype = "Any"
                    else:
                        msgtype = regspec['message_type']

                    ip = regspec['IP']
                    the_port = str(regspec['port'])

                    if is_action_topic(regspec['topic']):
                        topic_count += 1
                        output(fmt.format(regspec['topic'],
                                          msgtype,
                                          ip,
                                          the_port,
                                          regspec['nodename'],
                                          regspec['owner_host'] + "/" + regspec['owner_ip']))

    if topic_count == 0:
        output("No action feedback publishers provided by this node.")


def print_action_status_topics_simple(items, nodename=None):
    title = '------ Action Status Publishers '
    output('{}{}'.format(title, '-' * (105 - len(title))))
    fmt = "{:42}{:18}{:31}{}"
    output(fmt.format('Topic',
                      'Message_Type',
                      'Node_Name',
                      'Node_Host'))
    output('-' * 105)

    topic_count = 0
    sorted_topics = dict(sorted(items, key=lambda i: i[0]))
    for item in sorted_topics:
        regspecs = dict(items)[item]
        for regspec in regspecs:
            if not regspec['nodename'].endswith('_cli'):
                if nodename is None or nodename.lower() == regspec['nodename'].lower():
                    if regspec['message_type'] is None:
                        msgtype = "Any"
                    else:
                        msgtype = regspec['message_type']

                    if is_action_topic(regspec['topic']):
                        topic_count += 1
                        output(fmt.format(regspec['topic'],
                                          msgtype,
                                          regspec['nodename'],
                                          regspec['owner_host']))

    if topic_count == 0:
        output("No action feedback publishers provided by this node.")


def get_node_list():
    client = b9py.ServiceClient('b9node', None, 'broker/registration/node',
                                None, 5557, broker_uri)
    stat = client.connect()
    if stat.is_successful:
        r = client.call_service(b9py.MessageFactory.create_node_list_message())
        client.close()
        if not r.is_successful:
            print("Registration service has failed. {}".format(r.status_type), end="\r\n")
            return None
        else:
            return r.result_data.data.items()


def get_services_list():
    client = b9py.ServiceClient('b9service', None, 'broker/registration/topic',
                                None, 5555, broker_uri)
    stat = client.connect()
    if stat.is_successful:
        r = client.call_service(b9py.MessageFactory.create_srv_list_message())
        client.close()
        if not r.is_successful:
            print("Registration service has failed. {}".format(r.status_type), end="\r\n")
            return None
        else:
            return r.result_data.data.items()


def document(verbose, by_nodename, last_page=False):
    if by_nodename:
        if verbose:
            length = 145
        else:
            length = 105

        if _pdf_canvas is None:
            linefeed(1)
            output('~' * length)

        header = "Topics/Services for node '{}'".format(by_nodename)
        output("{}{}".format(' ' * int(length / 2 - len(header) / 2), header))
        linefeed(1)
    else:
        # List nodes
        node_list = get_node_list()
        if node_list:
            if verbose:
                print_node_registrations(node_list)
            else:
                print_node_registrations_simple(node_list)
            pagebreak()
        else:
            os.kill(os.getpid(), signal.SIGKILL)

    # List broker parameters
    if by_nodename is None:
        print_parameter_server("Broker", verbose, None)
        pagebreak()

        # Look for parameter servers and list out their parameters
        srvs = get_services_list()
        for srv in srvs:
            spec = srv[1][0]
            if spec['message_type'] == 'Parameter':
                print_parameter_server(spec['nodename'], verbose, spec['topic'])
                pagebreak()

    # List topics
    client = b9py.ServiceClient('b9topic', None, 'broker/registration/topic',
                                None, 5555, broker_uri)
    stat = client.connect()
    if stat.is_successful:
        r = client.call_service(b9py.MessageFactory.create_topic_list_message('pub'))
        if not r.is_successful:
            failed(r)
        else:
            if verbose:
                print_topic_registrations('pub', r.result_data.data.items(), by_nodename)
            else:
                print_topic_registrations_simple('pub', r.result_data.data.items(), by_nodename)
        if by_nodename is None:
            pagebreak()
        else:
            linefeed(2)

        r = client.call_service(b9py.MessageFactory.create_topic_list_message('sub'))
        if not r.is_successful:
            failed(r)
        else:
            if verbose:
                print_topic_registrations('sub', r.result_data.data.items(), by_nodename)
            else:
                print_topic_registrations_simple('sub', r.result_data.data.items(), by_nodename)

        client.close()
        if by_nodename is None:
            pagebreak()
        else:
            linefeed(2)

    # List services
    srv_list = get_services_list()
    if verbose:
        print_service_registrations(srv_list, by_nodename)
    else:
        print_service_registrations_simple(srv_list, by_nodename)

    if by_nodename is None:
        pagebreak()
    else:
        linefeed(2)

    # List actions
    if args['verbose']:
        print_action_services(srv_list, by_nodename)
    else:
        print_action_services_simple(srv_list, by_nodename)

    if by_nodename is None:
        pagebreak()
    else:
        linefeed(2)

    # List action feedback (status) publishers
    client = b9py.ServiceClient('b9topic', None, 'broker/registration/topic',
                                None, 5555, broker_uri)
    stat = client.connect()
    if stat.is_successful:
        r = client.call_service(b9py.MessageFactory.create_topic_list_message('pub'))
        if not r.is_successful:
            failed(r)
        else:
            if verbose:
                print_action_status_topics(r.result_data.data.items(), by_nodename)
            else:
                print_action_status_topics_simple(r.result_data.data.items(), by_nodename)

    if by_nodename is not None:
        if not last_page:
            pagebreak()


if __name__ == "__main__":
    print("B9 Schema Tool")

    # Control-C handler
    signal.signal(signal.SIGINT, shutdown_handler)

    ap = argparse.ArgumentParser()
    ap.add_argument('-x', '--nocolor', action='store_true', help='no color commands in output')
    ap.add_argument('-n', '--nodename', type=str, default=None, help='filter by node name.')
    ap.add_argument('-b', '--bynode', action='store_true', help='display by node.')
    ap.add_argument('-v', '--verbose', action='store_true', help='display in verbose mode')
    ap.add_argument('-p', '--pdf', type=str, default=None, help='output to this PDF file.')

    args = vars(ap.parse_args())

    # Get the broker's address
    broker_uri = os.environ.get('B9_BROKER')
    if broker_uri is None:
        broker_uri = 'localhost'
        print("B9 broker URI was not specified. Using localhost.", end="\r\n")

    # Init B9 core
    b9 = b9py.B9('b9list_cli', broker_uri)
    b9.start_logger(level=logging.ERROR)

    print("B9 OS version: {}".format(b9py.__version__), end="\r\n")
    linefeed(1)

    _verbose = args['verbose']
    _nocolor = args['nocolor']
    if args['pdf']:
        _nocolor = True
        if _verbose:
            print('Verbose mode not supported for PDF output.')
        _verbose = False
        _pdf_canvas = Canvas(args['pdf'], pagesize=LETTER)
        new_page()

    if args['bynode']:
        nodes = get_node_list()
        page_ct = 0
        if nodes:
            for node in nodes:
                if node[0] != 'BROKER':
                    document(_verbose, node[0], page_ct == (len(nodes) - 1))
                page_ct += 1
    else:
        document(_verbose, args['nodename'])

    if _pdf_canvas:
        end_doc()
        _pdf_canvas.save()
        print("Output schema file '{}' has been generated. Enjoy!".format(args['pdf']))
    else:
        linefeed(1)
