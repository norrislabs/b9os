#!/usr/bin/env python3

import os
import signal
import argparse
import logging
import pyfiglet
import xmltodict
import PySimpleGUI as sG
import pprint

import b9py

tuner_list = {}


def sigint_handler(_signum, _frame):
    print('\nCtrl-C shutdown.', end="\r\n")
    os.kill(os.getpid(), signal.SIGKILL)


def build_tuner(name, title, start, end, step, default):
    global tuner_list
    tuner_list[name] = {'title': title, 'start': start, 'end': end, 'step': step, 'default': default}

    btn_reset = sG.Button("Reset", key='btn_reset_' + name, size=(8, 1))
    sld_tuner = sG.Slider(orientation='horizontal', key='sld_tune_' + name, resolution=step,
                          pad=((10, 10), (0, 20)),
                          enable_events=True, expand_x=True,
                          default_value=default, range=(start, end))
    btn_set = sG.Button("Set", key='btn_set_' + name, size=(8, 1), disabled_button_color='gray')
    ckb_live = sG.Checkbox("Live", key='cb_live_' + name, enable_events=True, default=False)

    row = [btn_reset, sld_tuner, btn_set, ckb_live]
    frame = sG.Frame(title, [row], vertical_alignment='center', expand_x=True)
    return [frame]


sG.theme('DarkGrey9')

header = [
    [sG.Button("Reset All", key='btn_reset_all', size=(8, 1)),
     sG.T(" ", expand_x=True, pad=((10, 10), (0, 20))),
     sG.Button("Set All", key='btn_set_all', size=(8, 1), disabled_button_color='gray'),
     sG.Checkbox("All\nLive", key='cb_live_all', enable_events=True, default=False)]
]

footer = [
    [sG.T(key='status', expand_x=True),
     sG.Button("Clear", key="btn_clear", size=(6, 1), pad=(5, 5)),
     sG.T(" ", pad=((10, 10), (0, 24))),
     sG.Button("Exit", size=(8, 1), pad=(5, 5))]
]

# Build the tuners layout
tuner_layout = [
    [sG.Frame("All Tuners", header, expand_x=True)],
]

scroller = [
    [sG.Multiline(size=(50, 10), expand_x=True, expand_y=True,
                  pad=(5, 5),
                  font='courier 16',
                  background_color='black', text_color='lime',
                  key='ml_published')]
]

# Build the published values tuner layout
scroller_layout = [
    [sG.Frame("Published Values", scroller, expand_x=True, expand_y=True)],
]

if __name__ == "__main__":
    print(pyfiglet.figlet_format("B9 Tuner"))

    # Control-C handler
    signal.signal(signal.SIGINT, sigint_handler)

    ap = argparse.ArgumentParser()
    ap.add_argument("namespace", help="topic namespace.")
    ap.add_argument("config_spec", help="configuration spec file or topic.")

    args = vars(ap.parse_args())

    # Init B9 core
    b9 = b9py.B9('b9tuner_gui')
    b9.start_logger(level=logging.INFO)

    # Load tuners spec from an XML file
    if os.path.exists(args['config_spec']):
        with open(args['config_spec'], 'r', encoding='utf-8') as file:
            exp_xml = file.read()

            # Parse the XML configuration document
            tuners_spec = xmltodict.parse(exp_xml)

    # Load tuners spec from tuners spec service
    else:
        srv_cortex = b9.create_service_client("tuners/" + args['config_spec'], args['namespace'])
        stat = srv_cortex.connect()
        if not stat.is_successful:
            logging.error("Unable to connect to tuners spec service '{}'.".format(args['config_spec']))
            os.kill(os.getpid(), signal.SIGKILL)

        result = srv_cortex.call_service(b9py.MessageFactory.create_message_null())
        if result.is_successful:
            tuners_spec = result.result_data.data
        else:
            logging.error("Unable to call tuners spec service '{}'.".format(args['config_spec']))
            os.kill(os.getpid(), signal.SIGKILL)

    logging.info("\n\r\t" + pprint.pformat(tuners_spec))

    # Get a list of tuners
    tuners = tuners_spec["tuners"]["tuner"]
    if isinstance(tuners, dict):
        tuners = [tuners]

    # Build each tuner's frame
    for tnr in tuners:
        if '_' in tnr["@name"]:
            logging.warning("Do not use '_' in tuner name {}. They will be converted to '-'".format(tnr["@name"]))
        tuner = build_tuner(tnr["@name"].replace("_", "-"),
                            tnr["@title"],
                            float(tnr["@start"]),
                            float(tnr["@end"]),
                            float(tnr["@step"]),
                            float(tnr["@default"]))
        tuner_layout.extend([tuner])

    # Build the final layout
    layout = [[sG.Column(tuner_layout, vertical_alignment='top'),
               sG.Column(scroller_layout, vertical_alignment='top', expand_y=True)]]

    # Add the footer (status line and exit button)
    layout.extend([footer])

    # Build and show the main window
    window = sG.Window(tuners_spec['tuners']['@title'], layout, font=('Helvetica', 16), resizable=True)
    window.Finalize()

    # Setup tuners publisher
    pub = b9.create_publisher("tuners/" + tuners_spec['tuners']['@name'],
                              b9py.Message.MSGTYPE_DICT, args['namespace'])
    stat = pub.advertise()
    if not stat.is_successful:
        status = "Publisher '{}' failed to advertise.".format(tuners_spec['tuners']['@topic'])
        logging.error(status)
        window['status'].Update(value=status)

    # The Event Loop
    while True:
        event, values = window.read(timeout=100)
        if event == sG.WIN_CLOSED or event == 'Exit':
            break

        if event.startswith('btn_reset_'):
            tune_name = event.split("_")[2]
            pub_values = {}
            if tune_name == 'all':
                for kname in tuner_list.keys():
                    pub_values[kname] = tuner_list[kname]['default']
                    window['sld_tune_' + kname].Update(value=tuner_list[kname]['default'])
            else:
                pub_values[tune_name] = tuner_list[tune_name]['default']
                window['sld_tune_' + tune_name].Update(value=tuner_list[tune_name]['default'])
            pub.publish(b9py.MessageFactory.create_message_dictionary(pub_values))
            window['ml_published'].print(pub_values)

        elif event.startswith('btn_set_'):
            tune_name = event.split("_")[2]
            pub_values = {}
            if tune_name == 'all':
                for kname in tuner_list.keys():
                    pub_values[kname] = values['sld_tune_' + kname]
            else:
                pub_values[tune_name] = values['sld_tune_' + tune_name]
            pub.publish(b9py.MessageFactory.create_message_dictionary(pub_values))
            window['ml_published'].print(pub_values)

        elif event.startswith('sld_tune_'):
            tune_name = event.split("_")[2]
            pub_values = {}
            if values['cb_live_' + tune_name]:
                pub_values[tune_name] = values['sld_tune_' + tune_name]
                pub.publish(b9py.MessageFactory.create_message_dictionary(pub_values))
                window['ml_published'].print(pub_values)

        elif event.startswith('cb_live_'):
            tune_name = event.split("_")[2]
            if tune_name == 'all':
                window['btn_set_all'].update(disabled=values['cb_live_all'])
                for kname in tuner_list.keys():
                    window['btn_set_' + kname].update(disabled=values['cb_live_all'])
                    window['cb_live_' + kname].update(value=values['cb_live_all'])
            else:
                window['btn_set_' + tune_name].update(disabled=values['cb_live_' + tune_name])

        elif event.startswith('btn_clear'):
            window['ml_published'].update(value="")

        b9.spin_once()

    window.close()
