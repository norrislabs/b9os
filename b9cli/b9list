#!/usr/bin/env python3

import os
import logging
import signal
import argparse

import b9py


# Control-C handler
def shutdown_handler(_sig, _frame):
    os.kill(os.getpid(), signal.SIGKILL)


def failed(result):
    print("Registration service has failed. {}".format(result.status_type), end="\r\n")
    os.kill(os.getpid(), signal.SIGKILL)


def print_node_registrations(items):
    title = '------ Nodes '
    print('{}{}'.format(title, '-' * (140 - len(title))))
    fmt = "{:42}{:16}{:16}{:8}"
    print(fmt.format('Name',
                     'Host',
                     'IP',
                     'PID'), end="\r\n")
    print('-' * 140)

    sorted_nodes = dict(sorted(items, key=lambda i: (i[1][0]['host'], i[1][0]['nodename'])))
    last_host = None
    for item in sorted_nodes:
        regspec = dict(items)[item][0]
        if last_host and regspec['host'] != last_host:
            print(end="\r\n")
        print(fmt.format(regspec['nodename'],
                         regspec['host'],
                         str(regspec['IP']),
                         str(regspec['pid'])),
              end="\r\n")
        last_host = regspec['host']


def print_topic_registrations(regtype, items):
    if regtype == 'pub':
        title = '------ Publishers '
    else:
        title = '------ Subscribers '

    print('{}{}'.format(title, '-' * (140 - len(title))))
    fmt = "{:42}{:16}{:16}{:8}{:34}{}"
    print(fmt.format('Topic',
                     'Message_Type',
                     'IP',
                     'Port',
                     'Node_Name',
                     'Node_Host'), end="\r\n")
    print('-' * 140)

    sorted_topics = dict(sorted(items, key=lambda i: i[0]))
    for item in sorted_topics:
        regspec = dict(items)[item][0]
        if not regspec['nodename'].endswith('_cli'):
            if regspec['message_type'] is None:
                msgtype = "Any"
            else:
                msgtype = regspec['message_type']
            print(fmt.format(regspec['topic'],
                             msgtype,
                             regspec['IP'],
                             str(regspec['port']),
                             regspec['nodename'],
                             regspec['owner_host'] + "/" + regspec['owner_ip']), end="\r\n")


def print_service_registrations(items):
    title = '------ Services '
    print('{}{}'.format(title, '-' * (140 - len(title))))
    fmt = "{:42}{:16}{:16}{:8}{:34}{}"
    print(fmt.format('Topic',
                     'Message_Type',
                     'IP',
                     'Port',
                     'Node_Name',
                     'Node_Host'), end="\r\n")
    print('-' * 140)

    sorted_topics = dict(sorted(items, key=lambda i: i[0]))
    for item in sorted_topics:
        regspec = dict(items)[item][0]
        if not regspec['nodename'].endswith('_cli'):
            if regspec['message_type'] is None:
                msgtype = "Any"
            else:
                msgtype = regspec['message_type']
            print(fmt.format(regspec['topic'],
                             msgtype,
                             regspec['IP'],
                             str(regspec['port']),
                             regspec['nodename'],
                             regspec['owner_host'] + "/" + regspec['owner_ip']), end="\r\n")


if __name__ == "__main__":
    print("B9 List Tool")

    # Control-C handler
    signal.signal(signal.SIGINT, shutdown_handler)

    ap = argparse.ArgumentParser()
    ap.add_argument('-v', '--verbose', action='store_true', help='display debug messages')

    args = vars(ap.parse_args())

    # Get the broker's address
    broker_uri = os.environ.get('B9_BROKER')
    if broker_uri is None:
        broker_uri = 'localhost'
        print("B9 broker URI was not specified. Using localhost.", end="\r\n")

    # Init B9 core
    b9 = b9py.B9('b9list_cli', broker_uri)
    b9.start_logger(level=logging.ERROR)

    print("B9 OS version: {}".format(b9py.__version__), end="\r\n")
    print(end="\r\n")

    # List nodes
    client = b9py.ServiceClient('b9node', None, 'broker/registration/node', None, 5557, broker_uri)
    stat = client.connect()
    if stat.is_successful:
        r = client.call_service(b9py.MessageFactory.create_node_list_message())
        if not r.is_successful:
            print("Registration service has failed. {}".format(r.status_type), end="\r\n")
            os.kill(os.getpid(), signal.SIGKILL)
        else:
            print_node_registrations(r.result_data.data.items())
        client.close()
        print(end="\r\n")
        print(end="\r\n")

    # List topics
    client = b9py.ServiceClient('b9topic', None, 'broker/registration/topic', None, 5555, broker_uri)
    stat = client.connect()
    if stat.is_successful:
        r = client.call_service(b9py.MessageFactory.create_topic_list_message('pub'))
        if not r.is_successful:
            failed(r)
        else:
            print_topic_registrations('pub', r.result_data.data.items())
        print(end="\r\n")
        print(end="\r\n")

        r = client.call_service(b9py.MessageFactory.create_topic_list_message('sub'))
        if not r.is_successful:
            failed(r)
        else:
            print_topic_registrations('sub', r.result_data.data.items())
        client.close()
        print(end="\r\n")
        print(end="\r\n")

    # List services
    client = b9py.ServiceClient('b9service', None, 'broker/registration/topic', None, 5555, broker_uri)
    stat = client.connect()
    if stat.is_successful:
        r = client.call_service(b9py.MessageFactory.create_srv_list_message())
        if not r.is_successful:
            print("Registration service has failed. {}".format(r.status_type), end="\r\n")
            os.kill(os.getpid(), signal.SIGKILL)
        else:
            print_service_registrations(r.result_data.data.items())
        client.close()
        print(end="\r\n")
        print(end="\r\n")
