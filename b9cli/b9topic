#!/usr/bin/env python3

import os
import sys
import signal
import argparse
import yaml
import datetime
import time
import threading
import numpy as np
from colorama import Fore
import pprint
import readline

import b9py

# noinspection PyPackageRequirements
import cv2

colors = [Fore.LIGHTBLACK_EX, Fore.GREEN, Fore.MAGENTA, Fore.RED, Fore.BLUE, Fore.CYAN, Fore.YELLOW]
assigned_colors = {}
_running = True

_max_latency = 0
_lat_avg_list = [0]
_lat_avg_size = 10

_topics = []


class FPS:
    def __init__(self):
        # store the start time, end time, and total number of frames
        # that were examined between the start and end intervals
        self._start = None
        self._end = None
        self._numFrames = 0

    def start(self):
        # start the timer
        self._start = datetime.datetime.now()
        self._end = None
        self._numFrames = 0
        return self

    def stop(self):
        # stop the timer
        self._end = datetime.datetime.now()

    def update(self):
        # increment the total number of frames examined during the
        # start and end intervals
        self._numFrames += 1

    def elapsed(self):
        # return the total number of seconds between the start and
        # end interval
        return (self._end - self._start).total_seconds()

    def fps(self):
        # compute the (approximate) frames per second
        return self._numFrames / self.elapsed()

    def is_measuring(self):
        return self._numFrames > 0


def sigint_handler(_signum, _frame):
    global _running
    _running = False
    print('\nCtrl-C shutdown.', end="\r\n")
    os.kill(os.getpid(), signal.SIGKILL)


def failed(result):
    print("Registration service has failed. {}".format(result.status_type), end="\r\n")
    os.kill(os.getpid(), signal.SIGKILL)


def echo_text_cb(_topic, message: b9py.Message):
    if message.message_type == b9py.Message.MSGTYPE_DETECTION:
        label = message.data['label']
        color = Fore.WHITE
        if label in assigned_colors:
            color = assigned_colors[label]
        else:
            if len(colors) > 0:
                color = colors.pop()
                assigned_colors[label] = color

        if args['verbose']:
            print("Echo - {:20}{:34}{:10}{:5}{:12}{:12}{:8}{:5}{}{}{}"
                  .format(str(message.timestamp),
                          message.source,
                          message.data["detection_type"],
                          str(message.data['score']),
                          str(message.data['object_size']),
                          str(message.data['object_center']),
                          str(message.data['image_seq']),
                          str(message.data['id']),
                          color,
                          message.data['label'],
                          Fore.RESET))
        else:
            print("{:10}{:5}{:12}{:12}{:8}{:5}{}{}{}"
                  .format(message.data["detection_type"],
                          str(message.data['score']),
                          str(message.data['object_size']),
                          str(message.data['object_center']),
                          str(message.data['image_seq']),
                          str(message.data['id']),
                          color,
                          message.data['label'],
                          Fore.RESET))

        # Extra News!
        if "extra_data" in message.data.keys() and message.data['extra_data'] is not None:
            if args['extra_data']:
                print("       Extra Data:", end="\r\n")
                pp = pprint.PrettyPrinter(indent=10)
                pp.pprint(message.data["extra_data"])
                print(end="\r\n")

    else:
        if args['verbose']:
            print("Echo - {}".format(message), end="\r\n")
        else:
            print(message.data, end="\r\n")


def _average(lst):
    return round(sum(lst) / len(lst), 1)


def echo_image_cb(atopic, message: b9py.Message):
    global _running
    global _max_latency
    global _lat_avg_list
    global _lat_avg_size

    buff = np.frombuffer(message.data, np.uint8)
    img = cv2.imdecode(buff, cv2.IMREAD_COLOR)

    if args['latency']:
        lat_ms = message.latency * 1000

        if len(_lat_avg_list) == _lat_avg_size:
            _lat_avg_list.pop()
        _lat_avg_list.append(lat_ms)
        lat_avg = _average(_lat_avg_list)

        _max_latency = max(_max_latency, lat_ms)

        info_text = "{}, {}, {}".format(lat_ms, _max_latency, lat_avg)
        cv2.putText(img, info_text,
                    (250, 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1)

    with image_lock:
        cv2.imshow(atopic, img)
        key = cv2.waitKey(1)
        if key == 27:
            _running = False
            print('\nCanceled by user.', end="\r\n")
            os.kill(os.getpid(), signal.SIGKILL)


def hz_cb(_topic, _message):
    _fps.update()


def fps_cb():
    _fps.stop()

    ts = "{0: <18}".format(time.time())
    print("{} - {} hz".format(ts, round(_fps.fps(), 2)), end="\r\n")

    _fps.start()


def yaml_load(dinput):
    return yaml.load(dinput, Loader=yaml.FullLoader)


def print_registrations(regtype, items, nodename=None):
    global _topics

    if regtype == 'pub':
        title = '------ Publishers '
    else:
        title = '------ Subscribers '

    color = Fore.RESET
    print('{}{}'.format(title, '-' * (145 - len(title))))
    fmt = "{}{:42}{:16}{:16}{:8}{:34}{}" + Fore.RESET
    print(fmt.format(color,
                     'Topic',
                     'Message_Type',
                     'IP',
                     'Port',
                     'Node_Name',
                     'Node_Host'), end="\r\n")
    print('-' * 145)

    _topics = []
    sorted_topics = dict(sorted(items, key=lambda i: i[0]))
    for item in sorted_topics:
        regspecs = dict(items)[item]
        for regspec in regspecs:
            if not (regspec['nodename'].endswith('_cli') and regtype == "sub"):
                if nodename is None or nodename.lower() == regspec['nodename'].lower():
                    _topics.append(regspec['topic'])

                    if regspec['message_type'] is None:
                        msgtype = "Any"
                    else:
                        msgtype = regspec['message_type']

                    if 'has_publisher' in regspec.keys() and not regspec['has_publisher']:
                        ip = "-" * 14
                        the_port = "-" * 4
                        color = Fore.YELLOW
                    else:
                        ip = regspec['IP']
                        the_port = str(regspec['port'])
                        color = Fore.RESET

                    print(fmt.format(color,
                                     regspec['topic'],
                                     msgtype,
                                     ip,
                                     the_port,
                                     regspec['nodename'],
                                     regspec['owner_host'] + "/" + regspec['owner_ip']), end="\r\n")


def print_registrations_simple(regtype, items, nodename=None):
    global _topics

    if regtype == 'pub':
        title = '------ Publishers '
    else:
        title = '------ Subscribers '

    color = Fore.RESET
    print('{}{}'.format(title, '-' * (105 - len(title))))
    fmt = "{}{:42}{:16}{:34}{}" + Fore.RESET
    print(fmt.format(color,
                     'Topic',
                     'Message_Type',
                     'Node_Name',
                     'Node_Host'), end="\r\n")
    print('-' * 105)

    _topics = []
    sorted_topics = dict(sorted(items, key=lambda i: i[0]))
    for item in sorted_topics:
        regspecs = dict(items)[item]
        for regspec in regspecs:
            if not (regspec['nodename'].endswith('_cli') and regtype == "sub"):
                if nodename is None or nodename.lower() == regspec['nodename'].lower():
                    _topics.append(regspec['topic'])

                    if regspec['message_type'] is None:
                        msgtype = "Any"
                    else:
                        msgtype = regspec['message_type']

                    if 'has_publisher' in regspec.keys() and not regspec['has_publisher']:
                        color = Fore.YELLOW
                    else:
                        color = Fore.RESET

                    print(fmt.format(color,
                                     regspec['topic'],
                                     msgtype,
                                     regspec['nodename'],
                                     regspec['owner_host']), end="\r\n")


def completer(text, state):
    global _topics
    options = [i for i in _topics if i.startswith(text)]
    if state < len(options):
        return options[state]
    else:
        return None


_fps = FPS()

if __name__ == "__main__":
    print("\nB9 Topic Tool", end="\r\n")

    # Control-C handler
    signal.signal(signal.SIGINT, sigint_handler)

    ap = argparse.ArgumentParser()
    subparsers = ap.add_subparsers(dest='command')
    subparsers.required = True

    #  subparser for list
    parser_list = subparsers.add_parser('list')
    parser_list.add_argument("regtype", choices=['pub', 'sub', 'both'],
                             default='both', const='both', nargs='?', help="registration type")
    parser_list.add_argument('-n', '--nodename', type=str, default=None, help='filter by node name.')
    parser_list.add_argument('-v', '--verbose', action='store_false', help='display in verbose mode')

    #  subparser for echo
    parser_echo = subparsers.add_parser('echo')
    parser_echo.add_argument("topic", type=str, default="?", nargs='?', help="subscribe to this topic.")
    parser_echo.add_argument('-n', '--count', type=int, default=-1, help='count messages and exit program.')
    parser_echo.add_argument('-r', '--rate', type=float, default=-1, help='enable rate mode in hertz.')
    parser_echo.add_argument('-q', '--queue_size', type=int, default=-1, help='set queue size.')
    parser_echo.add_argument("-l", "--latency", action="store_true", help="display latency numbers.")
    parser_echo.add_argument('-v', '--verbose', action='store_true', help='display in verbose mode')
    parser_echo.add_argument('-x', '--extra_data', action='store_true', help='display in message extra data')

    #  subparser for hz
    parser_hz = subparsers.add_parser('hz')
    parser_hz.add_argument("topic", help="display the publishing rate of this topic.")
    parser_hz.add_argument('-r', '--rate', type=float, default=-1, help='enable rate mode in hertz.')
    parser_hz.add_argument('-q', '--queue_size', type=int, default=-1, help='set queue size.')

    #  subparser for pub(lish)
    parser_pub = subparsers.add_parser('pub')
    parser_pub.add_argument("topic", help="publish to this topic.")
    parser_pub.add_argument("type", help="message type.")
    parser_pub.add_argument("data", help="message data.", type=yaml_load)
    parser_pub.add_argument('-r', '--rate', type=float, default=-1, help='enable rate mode in hertz.')
    parser_pub.add_argument('-q', '--queue_size', type=int, default=-1, help='set queue size.')
    parser_pub.add_argument("-1", "--once", action="store_true", help="publish message only once.")
    parser_pub.add_argument("-s", "--silent", action="store_true", help="do not display publish messages.")

    #  subparser for unregister
    parser_unreg = subparsers.add_parser('unreg')
    parser_unreg.add_argument("topic", help="unregister this topic.")

    args = vars(ap.parse_args())

    # Get the broker's address
    broker_uri = os.environ.get('B9_BROKER')
    if broker_uri is None:
        broker_uri = 'localhost'
        print("B9 broker URI was not specified. Using localhost.", end="\r\n")

    # Init B9 core
    b9 = b9py.B9('b9topic_cli', broker_uri)
#    b9.start_logger(level=logging.DEBUG)
    print(end="\r\n")

    # Setup for optional topic autocompletion
    if sys.platform == 'darwin':
        # Apple uses libedit.
        readline.parse_and_bind("bind -e")
        readline.parse_and_bind("bind '\t' rl_complete")
    else:
        # Some tweaks for linux
        readline.parse_and_bind('tab: complete')
        readline.set_completer_delims(' \t\n`~!@#$%^&*()-=+[{]}\\|;:\'",<>?')
    readline.set_completer(completer)

    # Execute the specified command
    client = b9py.ServiceClient('b9topic', None, 'broker/registration/topic',
                                None, 5555, broker_uri)
    stat = client.connect()
    if stat.is_successful:
        # List
        if args['command'].lower() == 'list':
            if args['regtype'] == 'pub' or args['regtype'] == 'both':
                r = client.call_service(b9py.MessageFactory.create_topic_list_message('pub'))
                if not r.is_successful:
                    failed(r)
                else:
                    if args['verbose']:
                        print_registrations_simple('pub', r.result_data.data.items(), args['nodename'])
                    else:
                        print_registrations('pub', r.result_data.data.items(), args['nodename'])

            if args['regtype'] == 'sub' or args['regtype'] == 'both':
                if args['regtype'] == 'both':
                    print()
                r = client.call_service(b9py.MessageFactory.create_topic_list_message('sub'))
                if not r.is_successful:
                    failed(r)
                else:
                    if args['verbose']:
                        print_registrations_simple('sub', r.result_data.data.items(), args['nodename'])
                    else:
                        print_registrations('sub', r.result_data.data.items(), args['nodename'])

        # Echo
        elif args['command'].lower() == 'echo':
            topic = None
            if args['topic'] == '?':
                # Topic not specified - show published and get a topic from the user
                r = client.call_service(b9py.MessageFactory.create_topic_list_message('pub'))
                if not r.is_successful:
                    failed(r)
                else:
                    if args['verbose']:
                        print_registrations_simple('pub', r.result_data.data.items())
                    else:
                        print_registrations('pub', r.result_data.data.items())
                topic = input("\ntopic: ")
            else:
                # Use the topic provided by the command line
                topic = (args['topic'])

            # Lookup the message type
            r = client.call_service(b9py.MessageFactory.create_topic_lookup_message(topic))
            if not r.is_successful:
                failed(r)
            else:
                reg = r.result_data.data
                cb = None
                if reg['found']:
                    if reg['message_type'] == b9py.Message.MSGTYPE_IMAGE:
                        # Message is an image so show it in a cv window
                        image_lock = threading.Lock()
                        cv2.namedWindow(topic, cv2.WINDOW_AUTOSIZE)
                        cb = echo_image_cb
                    else:
                        # Message is text so print them to the screen
                        cb = echo_text_cb
                else:
                    print(Fore.RED + "Unknown topic '{}'\n".format(topic), end="\r\n")
                    print(Fore.RESET)

                if cb:
                    # Subscribe
                    sub = b9.create_subscriber(topic, cb, None, args['rate'], args['queue_size'])
                    print("Subscribed to '{}'\n".format(topic), end="\r\n")
                    signal.signal(signal.SIGINT, sigint_handler)
                    b9.spin_forever()

        # Hz
        elif args['command'].lower() == 'hz':
            sub = b9.create_subscriber(args['topic'], hz_cb, None, args['rate'], args['queue_size'])
            _fps.start()
            b9.create_timer(5, fps_cb)

            print("Measuring messages per second for '{}'...\n".format(args['topic']), end="\r\n")
            signal.signal(signal.SIGINT, sigint_handler)
            b9.spin_forever()

        # Pub(lish)
        elif args['command'].lower() == 'pub':
            topic = args['topic']
            msg_type = args['type'].lower()
            data = args['data']

            new_pub = b9.create_publisher(topic, msg_type.capitalize(), None, args['rate'], args['queue_size'])
            stat = new_pub.advertise()
            if stat.is_successful:
                print("Publishing to '{}'...".format(args['topic']), end="\r\n")
                while _running:
                    msg = b9py.Message(msg_type.capitalize(), data, 'b9topic')
                    new_pub.publish_wait(msg)

                    if not args['silent']:
                        print("Pub - {}".format(msg), end="\r\n")
                    if args['once']:
                        break

        # Unregister
        elif args['command'].lower() == 'unreg':
            r = client.call_service(b9py.MessageFactory.create_topic_unreg_message(args['topic']))
            if not r.is_successful:
                failed(r)
            else:
                reg = r.result_data.data
                if reg['found']:
                    print("Topic of '{}' has been unregistered.".format(args['topic']), end="\r\n")
                else:
                    print("Topic of '{}' not found.".format(args['topic']), end="\r\n")

        print(end="\r\n")
    else:
        print("Unable to connect to Topic Name Service.", end="\r\n")
        print("Broker running?", end="\r\n")
