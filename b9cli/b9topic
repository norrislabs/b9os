#!/usr/bin/env python3

import os
import signal
import b9py
import argparse
import logging
import yaml
import datetime
import time
import threading
import numpy as np
from colorama import Fore
import pprint

# noinspection PyPackageRequirements
import cv2

colors = [Fore.LIGHTBLACK_EX, Fore.GREEN, Fore.MAGENTA, Fore.RED, Fore.BLUE, Fore.CYAN, Fore.YELLOW]
assigned_colors = {}
_running = True


class FPS:
    def __init__(self):
        # store the start time, end time, and total number of frames
        # that were examined between the start and end intervals
        self._start = None
        self._end = None
        self._numFrames = 0

    def start(self):
        # start the timer
        self._start = datetime.datetime.now()
        self._end = None
        self._numFrames = 0
        return self

    def stop(self):
        # stop the timer
        self._end = datetime.datetime.now()

    def update(self):
        # increment the total number of frames examined during the
        # start and end intervals
        self._numFrames += 1

    def elapsed(self):
        # return the total number of seconds between the start and
        # end interval
        return (self._end - self._start).total_seconds()

    def fps(self):
        # compute the (approximate) frames per second
        return self._numFrames / self.elapsed()

    def is_measuring(self):
        return self._numFrames > 0


def sigint_handler(_signum, _frame):
    global _running
    _running = False
    print('\nCtrl-C shutdown.', end="\r\n")
    os.kill(os.getpid(), signal.SIGKILL)


def failed(result):
    print("Registration service has failed. {}".format(result.status_type), end="\r\n")
    os.kill(os.getpid(), signal.SIGKILL)


def echo_text_cb(_topic, message: b9py.Message):
    if message.message_type == b9py.Message.MSGTYPE_DETECTION:
        label = message.data['label']
        color = Fore.WHITE
        if label in assigned_colors:
            color = assigned_colors[label]
        else:
            if len(colors) > 0:
                color = colors.pop()
                assigned_colors[label] = color

        print("Echo - {:20}{:34}{:10}{:5}{:12}{:12}{:8}{:5}{}{}{}"
              .format(str(message.timestamp),
                      message.source,
                      message.data["detection_type"],
                      str(message.data['score']),
                      str(message.data['object_size']),
                      str(message.data['object_center']),
                      str(message.data['image_seq']),
                      str(message.data['id']),
                      color,
                      message.data['label'],
                      Fore.RESET))

        # Extra News!
        if "extra_data" in message.data.keys() and message.data['extra_data'] is not None:
            print("       Extra Data:", end="\r\n")
            pp = pprint.PrettyPrinter(indent=10)
            pp.pprint(message.data["extra_data"])
            print(end="\r\n")

    else:
        print("Echo - {}".format(message), end="\r\n")


def echo_image_cb(_topic, message: b9py.Message):
    global _running

    buff = np.frombuffer(message.data, np.uint8)
    img = cv2.imdecode(buff, cv2.IMREAD_COLOR)

    with image_lock:
        cv2.imshow(args['topic'], img)
        key = cv2.waitKey(1)
        if key == 27:
            _running = False
            print('\nCanceled by user.', end="\r\n")
            os.kill(os.getpid(), signal.SIGKILL)


def hz_cb(_topic, _message):
    _fps.update()


def fps_cb():
    _fps.stop()

    ts = "{0: <18}".format(time.time())
    print("{} - {} hz".format(ts, round(_fps.fps(), 2)), end="\r\n")

    _fps.start()


def yaml_load(dinput):
    return yaml.load(dinput, Loader=yaml.FullLoader)


def print_registrations(regtype, items):
    if regtype == 'pub':
        title = '------ Publishers '
    else:
        title = '------ Subscribers '

    print('{}{}'.format(title, '-' * (135 - len(title))))
    fmt = "{:38}{:16}{:16}{:8}{:32}{}"
    print(fmt.format('Topic',
                     'Message_Type',
                     'IP',
                     'Port',
                     'Node_Name',
                     'Node_Host'), end="\r\n")
    print('-' * 135)

    sorted_topics = dict(sorted(items, key=lambda i: i[0]))
    for item in sorted_topics:
        regspec = dict(items)[item][0]
        if not regspec['nodename'].endswith('_cli'):
            if regspec['message_type'] is None:
                msgtype = "Any"
            else:
                msgtype = regspec['message_type']
            print(fmt.format(regspec['topic'],
                             msgtype,
                             regspec['IP'],
                             str(regspec['port']),
                             regspec['nodename'],
                             regspec['owner_host'] + "/" + regspec['owner_ip']), end="\r\n")


_fps = FPS()


if __name__ == "__main__":
    print("\nB9 Topic Tool", end="\r\n")

    # Control-C handler
    signal.signal(signal.SIGINT, sigint_handler)

    ap = argparse.ArgumentParser()
    subparsers = ap.add_subparsers(dest='command')
    subparsers.required = True

    #  subparser for list
    parser_list = subparsers.add_parser('list')
    parser_list.add_argument("regtype", choices=['pub', 'sub', 'both'],
                             default='both', const='both', nargs='?', help="registration type")

    #  subparser for echo
    parser_echo = subparsers.add_parser('echo')
    parser_echo.add_argument("topic", help="subscribe to this topic.")
    parser_echo.add_argument('-n', '--count', type=int, default=-1, help='count messages and exit program.')
    parser_echo.add_argument('-r', '--rate', type=float, default=-1, help='enable rate mode in hertz.')
    parser_echo.add_argument('-q', '--queue_size', type=int, default=-1, help='set queue size.')

    #  subparser for hz
    parser_hz = subparsers.add_parser('hz')
    parser_hz.add_argument("topic", help="display the publishing rate of this topic.")
    parser_hz.add_argument('-r', '--rate', type=float, default=-1, help='enable rate mode in hertz.')
    parser_hz.add_argument('-q', '--queue_size', type=int, default=-1, help='set queue size.')

    #  subparser for pub(lish)
    parser_pub = subparsers.add_parser('pub')
    parser_pub.add_argument("topic", help="publish to this topic.")
    parser_pub.add_argument("type", help="message type.")
    parser_pub.add_argument("data", help="message data.", type=yaml_load)
    parser_pub.add_argument('-r', '--rate', type=float, default=-1, help='enable rate mode in hertz.')
    parser_pub.add_argument('-q', '--queue_size', type=int, default=-1, help='set queue size.')
    parser_pub.add_argument("-1", "--once", action="store_true", help="publish message only once.")
    parser_pub.add_argument("-s", "--silent", action="store_true", help="do not display publish messages.")

    #  subparser for unregister
    parser_unreg = subparsers.add_parser('unreg')
    parser_unreg.add_argument("topic", help="unregister this topic.")

    args = vars(ap.parse_args())

    # Get the broker's address
    broker_uri = os.environ.get('B9_BROKER')
    if broker_uri is None:
        broker_uri = 'localhost'
        print("B9 broker URI was not specified. Using localhost.", end="\r\n")

    # Init B9 core
    b9 = b9py.B9('b9topic_cli', broker_uri)
    b9.start_logger(level=logging.DEBUG)
    print(end="\r\n")

    # Execute the specified command
    client = b9py.ServiceClient('b9topic', None, 'broker/registration/topic', None, 5555, broker_uri)
    stat = client.connect()
    if stat.is_successful:
        # List
        if args['command'].lower() == 'list':
            if args['regtype'] == 'pub' or args['regtype'] == 'both':
                r = client.call_service(b9py.MessageFactory.create_topic_list_message('pub'))
                if not r.is_successful:
                    failed(r)
                else:
                    print_registrations('pub', r.result_data.data.items())

            if args['regtype'] == 'sub' or args['regtype'] == 'both':
                if args['regtype'] == 'both':
                    print()
                r = client.call_service(b9py.MessageFactory.create_topic_list_message('sub'))
                if not r.is_successful:
                    failed(r)
                else:
                    print_registrations('sub', r.result_data.data.items())

        # Echo
        elif args['command'].lower() == 'echo':
            # Lookup the message type
            r = client.call_service(b9py.MessageFactory.create_topic_lookup_message(args['topic']))
            if not r.is_successful:
                failed(r)
            else:
                reg = r.result_data.data
                cb = echo_text_cb
                if reg['found']:
                    if reg['message_type'] == b9py.Message.MSGTYPE_IMAGE:
                        # Message is an image so show it in a window
                        image_lock = threading.Lock()
                        cv2.namedWindow(args['topic'], cv2.WINDOW_AUTOSIZE)
                        cb = echo_image_cb
                else:
                    print(Fore.RED + "Unknown topic '{}'...\n".format(args['topic']), end="\r\n")
                    print(Fore.RESET)

                # Subscribe
                sub = b9.create_subscriber(args['topic'], cb, None, args['rate'], args['queue_size'])
                print("Subscribed to '{}'...\n".format(args['topic']), end="\r\n")
                signal.signal(signal.SIGINT, sigint_handler)
                b9.spin_forever()

        # Hz
        elif args['command'].lower() == 'hz':
            sub = b9.create_subscriber(args['topic'], hz_cb, None, args['rate'], args['queue_size'])
            _fps.start()
            b9.create_timer(5, fps_cb)

            print("Measuring messages per second for '{}'...\n".format(args['topic']), end="\r\n")
            signal.signal(signal.SIGINT, sigint_handler)
            b9.spin_forever()

        # Pub(lish)
        elif args['command'].lower() == 'pub':
            topic = args['topic']
            msg_type = args['type'].lower()
            data = args['data']

            new_pub = b9.create_publisher(topic, msg_type.capitalize(), None, args['rate'], args['queue_size'])
            stat = new_pub.advertise()
            if stat.is_successful:
                print("Publishing to '{}'...".format(args['topic']), end="\r\n")
                while _running:
                    msg = b9py.Message(msg_type.capitalize(), data, 'b9topic')
                    new_pub.publish_wait(msg)

                    if not args['silent']:
                        print("Pub - {}".format(msg), end="\r\n")
                    if args['once']:
                        break

        # Unregister
        elif args['command'].lower() == 'unreg':
            r = client.call_service(b9py.MessageFactory.create_topic_unreg_message(args['topic']))
            if not r.is_successful:
                failed(r)
            else:
                reg = r.result_data.data
                if reg['found']:
                    print("Topic of '{}' has been unregistered.".format(args['topic']), end="\r\n")
                else:
                    print("Topic of '{}' not found.".format(args['topic']), end="\r\n")

        print(end="\r\n")
    else:
        print("Unable to connect to Topic Name Service.", end="\r\n")
        print("Broker running?", end="\r\n")
