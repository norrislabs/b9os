#!/usr/bin/env python3

import os
import sys
import signal
import subprocess
import argparse
import time
import pyfiglet

PYTHON_EXE = "python3"


# Control-C handler
def shutdown_handler(_sig, _frame):
    os.kill(os.getpid(), signal.SIGKILL)


def start_process(command, env, shell=False):
    try:
        return subprocess.Popen(command, env=env,
                                stdin=sys.stdin, stdout=sys.stdout,
                                shell=shell, universal_newlines=True, encoding='unicode')

    except PermissionError:
        return None


if __name__ == "__main__":
    print("B9 Run Utility")
    signal.signal(signal.SIGINT, shutdown_handler)

    ap = argparse.ArgumentParser()
    ap.add_argument("workspace", help="workspace name")
    ap.add_argument("package", help="package name")
    ap.add_argument("type", help="executable program in package")
    ap.add_argument('rest', nargs=argparse.REMAINDER)
    args = vars(ap.parse_args())

    print(pyfiglet.figlet_format("B9 Run"))

    # Add py extension if not present
    prog_name: str = args['type'].strip()
    if not prog_name.endswith(".py"):
        prog_name += ".py"

    # Build full executable file path
    exe = os.path.join(args['workspace'], args['package'], prog_name)
    if os.path.exists(exe):
        cmd = [PYTHON_EXE, exe]
        # Add executable's arguments
        cmd.extend(args['rest'])

        # Now run the damn thing
        print("Run command: {}".format(cmd))
        current_env = os.environ.copy()
        p = start_process(cmd, current_env)
        if p is None:
            print("Permission error. Does '{}' have execute permissions?".format(args['type']))
            os.kill(os.getpid(), signal.SIGKILL)

        # Wait to complete
        while p.poll() is None:
            time.sleep(1)

        print('Exited with return code %d' % p.returncode)
    else:
        print("Executable '{}' not found.".format(exe))
