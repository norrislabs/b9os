#!/usr/bin/env python3

import os
import sys
import signal
import b9py
import argparse
import yaml
import time
import readline

_running = True
_srv_topics = []


def sigint_handler(_signum, _frame):
    global _running
    print('\nCtrl-C shutdown.', end="\r\n")
    _running = False


def failed(srv_result):
    print("Registration service has failed. {}".format(srv_result.status_type), end="\r\n")
    os.kill(os.getpid(), signal.SIGKILL)


def yaml_load(dinput):
    if dinput == '?':
        return '?'
    else:
        return yaml.load(dinput, Loader=yaml.FullLoader)


def print_registrations(items, nodename=None):
    global _srv_topics

    title = '------ Services '
    print('{}{}'.format(title, '-' * (146 - len(title))))
    fmt = "{:45}{:18}{:16}{:8}{:30}{}"
    print(fmt.format('Topic',
                     'Message_Type',
                     'IP',
                     'Port',
                     'Node_Name',
                     'Node_Host'), end="\r\n")
    print('-' * 146)

    _srv_topics = []
    sorted_topics = dict(sorted(items, key=lambda i: i[0]))
    for item in sorted_topics:
        regspecs = dict(items)[item]
        for regspec in regspecs:
            if not (regspec['nodename'].endswith('_cli')):
                _srv_topics.append(regspec['topic'])

                if nodename is None or nodename.lower() == regspec['nodename'].lower():
                    if regspec['message_type'] is None:
                        msgtype = "Any"
                    else:
                        msgtype = regspec['message_type']

                    if regspec['ret_msg_type'] is None:
                        retmsgtype = "Any"
                    else:
                        retmsgtype = regspec['ret_msg_type']

                    print(fmt.format(regspec['topic'],
                                     msgtype + '/' + retmsgtype,
                                     regspec['IP'],
                                     str(regspec['port']),
                                     regspec['nodename'],
                                     regspec['owner_host'] + "/" + regspec['owner_ip']), end="\r\n")


def print_registrations_simple(items, nodename=None):
    global _srv_topics

    title = '------ Services '
    print('{}{}'.format(title, '-' * (108 - len(title))))
    fmt = "{:45}{:18}{:30}{}"
    print(fmt.format('Topic',
                     'Message_Type',
                     'Node_Name',
                     'Node_Host'), end="\r\n")
    print('-' * 108)

    _srv_topics = []
    sorted_topics = dict(sorted(items, key=lambda i: i[0]))
    for item in sorted_topics:
        regspecs = dict(items)[item]
        for regspec in regspecs:
            if not (regspec['nodename'].endswith('_cli')):
                _srv_topics.append(regspec['topic'])

                if nodename is None or nodename.lower() == regspec['nodename'].lower():
                    if regspec['message_type'] is None:
                        msgtype = "Any"
                    else:
                        msgtype = regspec['message_type']

                    if regspec['ret_msg_type'] is None:
                        retmsgtype = "Any"
                    else:
                        retmsgtype = regspec['ret_msg_type']

                    print(fmt.format(regspec['topic'],
                                     msgtype + '/' + retmsgtype,
                                     regspec['nodename'],
                                     regspec['owner_host']), end="\r\n")


def completer(text, state):
    global _srv_topics
    options = [i for i in _srv_topics if i.startswith(text)]
    if state < len(options):
        return options[state]
    else:
        return None


if __name__ == "__main__":
    print("\nB9 Service Tool", end="\r\n")

    # Control-C handler
    signal.signal(signal.SIGINT, sigint_handler)

    ap = argparse.ArgumentParser()
    subparsers = ap.add_subparsers(dest='command')
    subparsers.required = True

    #  subparser for list
    parser_list = subparsers.add_parser('list')
    parser_list.add_argument('-n', '--nodename', type=str, default=None, help='filter by node name.')
    parser_list.add_argument('-v', '--verbose', action='store_false', help='display in verbose mode')

    #  subparser for call
    parser_call = subparsers.add_parser('call')
    parser_call.add_argument("topic", type=str, default='?', nargs='?', help="publish to this topic.")
    parser_call.add_argument("data", default='?', nargs='?', help="message data.", type=yaml_load)
    parser_call.add_argument('-i', '--interval', type=float, default=-1, help='repeat inverval in seconds.')
    parser_call.add_argument("-s", "--silent", action="store_true", help="do not display service result messages.")
    parser_call.add_argument('-v', '--verbose', action='store_false', help='display in verbose mode')

    #  subparser for info
    parser_info = subparsers.add_parser('info')
    parser_info.add_argument("topic", help="information on this service.")

    #  subparser for unregister
    parser_unreg = subparsers.add_parser('unreg')
    parser_unreg.add_argument("topic", help="unregister this service.")

    args = vars(ap.parse_args())

    broker_uri = os.environ.get('B9_BROKER')
    if broker_uri is None:
        broker_uri = 'localhost'
        print("B9 broker URI is unspecified. Using localhost.", end="\r\n")

    # Init B9 core
    b9 = b9py.B9('b9service_cli', broker_uri)
#    b9.start_logger(level=logging.INFO)
    print(end="\r\n")

    # Setup for optional topic autocompletion
    if sys.platform == 'darwin':
        # Apple uses libedit.
        readline.parse_and_bind("bind -e")
        readline.parse_and_bind("bind '\t' rl_complete")
    else:
        # Some tweaks for linux
        readline.parse_and_bind('tab: complete')
        readline.set_completer_delims(' \t\n`~!@#$%^&*()-=+[{]}\\|;:\'",<>?')
    readline.set_completer(completer)

    client = b9py.ServiceClient('b9service', None, 'broker/registration/topic',
                                None, 5555, broker_uri)
    stat = client.connect()
    if stat.is_successful:
        # List
        if args['command'].lower() == 'list':
            result = client.call_service(b9py.MessageFactory.create_srv_list_message())
            if not result.is_successful:
                print("Registration service has failed. {}".format(result.status_type), end="\r\n")
                os.kill(os.getpid(), signal.SIGKILL)
            else:
                if args['verbose']:
                    print_registrations_simple(result.result_data.data.items(), args['nodename'])
                else:
                    print_registrations(result.result_data.data.items(), args['nodename'])

        # Call
        elif args['command'].lower() == 'call':
            topic = None
            call_data = None
            if args['topic'] == '?':
                # Topic not specified - show published and get a topic from the user
                r = client.call_service(b9py.MessageFactory.create_srv_list_message())
                if not r.is_successful:
                    failed(r)
                else:
                    if args['verbose']:
                        print_registrations_simple(r.result_data.data.items())
                    else:
                        print_registrations(r.result_data.data.items())
                topic = input("\nTopic: ")
            else:
                # Use the topic provided by the command line
                topic = (args['topic'])

            if topic:
                caller = b9.create_service_client(topic)
                stat = caller.connect()
                if not stat.is_successful:
                    print("Service call failed. {}".format(stat.status_type), end="\r\n")
                    os.kill(os.getpid(), signal.SIGKILL)

                msg_type: str = stat.result_data.data['message_type'].lower()
                _srv_topics = []
                if msg_type != "null":
                    if args['data'] == '?':
                        # Data not specified - Get it from the user
                        call_data = yaml_load(input("Data ({}): ".format(msg_type.capitalize())))
                    else:
                        call_data = args['data']
                        print(end="\r\n")

                msg = None
                try:
                    if msg_type == 'string' or msg_type == 'str':
                        msg = b9py.MessageFactory.create_message_string(call_data, 'b9service')
                    elif msg_type == 'int':
                        msg = b9py.MessageFactory.create_message_int(call_data, 'b9service')
                    elif msg_type == 'float':
                        msg = b9py.MessageFactory.create_message_float(call_data, 'b9service')
                    elif msg_type == 'bool':
                        msg = b9py.MessageFactory.create_message_bool(call_data, 'b9service')
                    elif msg_type == 'null':
                        msg = b9py.MessageFactory.create_message_null('b9service')
                    elif msg_type == 'list':
                        msg = b9py.MessageFactory.create_message_list(call_data, 'b9service')
                    else:
                        msg = b9py.MessageFactory.create_message_dictionary(call_data, 'b9service')
                except AssertionError:
                    print("Invalid data type. '{}' is not an {}.".format(call_data, msg_type.capitalize()), end="\r\n")

                if msg:
                    while _running:
                        result = caller.call_service(msg)
                        if result.is_successful:
                            if not args['silent']:
                                result_str = "timestamp: {}, seq: {}, message type: {},\r\n        data: {}".format(
                                    result.result_data.timestamp,
                                    result.result_data.sequence,
                                    result.result_data.message_type,
                                    result.result_data.data)
                                print("Result: {}".format(result_str), end="\r\n")
                            if args['interval'] > 0:
                                time.sleep(args['interval'])
                            else:
                                break
                        else:
                            print("Service call failed. {}".format(result.status_type), end="\r\n")

        # Info
        elif args['command'].lower() == 'info':
            r = client.call_service(b9py.MessageFactory.create_srv_lookup_message(args['topic']))
            if not r.is_successful:
                failed(r)
            else:
                reg = r.result_data.data
                if reg['found']:
                    print("{:30}{:12}{:16}{:8}{}".format(reg['topic'], reg['message_type'],
                                                         reg['IP'], str(reg['port']),
                                                         reg['nodename']), end="\r\n")
                else:
                    print("Service for '{}' not found.".format(args['topic']), end="\r\n")

        # Unregister
        elif args['command'].lower() == 'unreg':
            r = client.call_service(b9py.MessageFactory.create_srv_unreg_message(args['topic']))
            if not r.is_successful:
                failed(r)
            else:
                reg = r.result_data.data
                if reg['found']:
                    print("Service for '{}' has been unregistered.".format(args['topic']), end="\r\n")
                else:
                    print("Service for '{}' not found.".format(args['topic']), end="\r\n")

        print(end="\r\n")
    else:
        print("Unable to connect to Topic Name Service.", end="\r\n")
        print("Broker running?", end="\r\n")
