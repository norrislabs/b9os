#!/usr/bin/env python3
import logging
import os
import sys
import signal
import b9py
import argparse
import yaml
import readline
from colorama import Fore

_running = True
_srv_topics = []
_topics = []


def sigint_handler(_signum, _frame):
    global _running
    print('\nCtrl-C shutdown.', end="\r\n")
    _running = False


def failed(srv_result):
    print("Registration service has failed. {}".format(srv_result.status_type), end="\r\n")
    os.kill(os.getpid(), signal.SIGKILL)


def yaml_load(dinput):
    if dinput == '?':
        return '?'
    else:
        return yaml.load(dinput, Loader=yaml.FullLoader)


def is_action_service(action_topic: str):
    names = action_topic.split('/')
    if names[2] == "action" and names[-1] in ['start', 'stop', 'pause']:
        return names[3]
    else:
        return None


def is_action_topic(action_topic: str):
    names = action_topic.split('/')
    if names[2] == "action" and names[-1] == 'status':
        return names[3]
    else:
        return None


def print_service_registrations(items, nodename=None):
    global _srv_topics

    title = '------ Action Services '
    print('{}{}'.format(title, '-' * (146 - len(title))))
    fmt = "{:45}{:18}{:16}{:8}{:30}{}"
    print(fmt.format('Topic',
                     'Message_Type',
                     'IP',
                     'Port',
                     'Node_Name',
                     'Node_Host'), end="\r\n")
    print('-' * 146)

    _srv_topics = []
    sorted_topics = dict(sorted(items, key=lambda i: i[0]))
    for item in sorted_topics:
        regspecs = dict(items)[item]
        for regspec in regspecs:
            if not (regspec['nodename'].endswith('_cli')):
                _srv_topics.append(regspec['topic'])

                if nodename is None or nodename.lower() == regspec['nodename'].lower():
                    if regspec['message_type'] is None:
                        msgtype = "Any"
                    else:
                        msgtype = regspec['message_type']

                    if regspec['ret_msg_type'] is None:
                        retmsgtype = "Any"
                    else:
                        retmsgtype = regspec['ret_msg_type']

                    if is_action_service(regspec['topic']):
                        print(fmt.format(regspec['topic'],
                                         msgtype + '/' + retmsgtype,
                                         regspec['IP'],
                                         str(regspec['port']),
                                         regspec['nodename'],
                                         regspec['owner_host'] + "/" + regspec['owner_ip']), end="\r\n")


def print_service_registrations_simple(items, nodename=None):
    global _srv_topics

    title = '------ Action Services '
    print('{}{}'.format(title, '-' * (108 - len(title))))
    fmt = "{:45}{:18}{:30}{}"
    print(fmt.format('Topic',
                     'Message_Type',
                     'Node_Name',
                     'Node_Host'), end="\r\n")
    print('-' * 108)

    _srv_topics = []
    sorted_topics = dict(sorted(items, key=lambda i: i[0]))
    for item in sorted_topics:
        regspecs = dict(items)[item]
        for regspec in regspecs:
            if not (regspec['nodename'].endswith('_cli')):
                _srv_topics.append(regspec['topic'])

                if nodename is None or nodename.lower() == regspec['nodename'].lower():
                    if regspec['message_type'] is None:
                        msgtype = "Any"
                    else:
                        msgtype = regspec['message_type']

                    if regspec['ret_msg_type'] is None:
                        retmsgtype = "Any"
                    else:
                        retmsgtype = regspec['ret_msg_type']

                    if is_action_service(regspec['topic']):
                        print(fmt.format(regspec['topic'],
                                         msgtype + '/' + retmsgtype,
                                         regspec['nodename'],
                                         regspec['owner_host']), end="\r\n")


def print_topic_registrations(items, nodename=None):
    global _topics

    title = '------ Action Status Publishers '

    color = Fore.RESET
    print('{}{}'.format(title, '-' * (145 - len(title))))
    fmt = "{}{:45}{:18}{:16}{:8}{:30}{}" + Fore.RESET

    print(fmt.format(color,
                     'Topic',
                     'Message_Type',
                     'IP',
                     'Port',
                     'Node_Name',
                     'Node_Host'), end="\r\n")
    print('-' * 145)

    _topics = []
    sorted_topics = dict(sorted(items, key=lambda i: i[0]))
    for item in sorted_topics:
        regspecs = dict(items)[item]
        for regspec in regspecs:
            if not regspec['nodename'].endswith('_cli'):
                if nodename is None or nodename.lower() == regspec['nodename'].lower():
                    _topics.append(regspec['topic'])

                    if regspec['message_type'] is None:
                        msgtype = "Any"
                    else:
                        msgtype = regspec['message_type']

                    if 'has_publisher' in regspec.keys() and not regspec['has_publisher']:
                        ip = "-" * 14
                        the_port = "-" * 4
                        color = Fore.YELLOW
                    else:
                        ip = regspec['IP']
                        the_port = str(regspec['port'])
                        color = Fore.RESET

                    if is_action_topic(regspec['topic']):
                        print(fmt.format(color,
                                         regspec['topic'],
                                         msgtype,
                                         ip,
                                         the_port,
                                         regspec['nodename'],
                                         regspec['owner_host'] + "/" + regspec['owner_ip']), end="\r\n")


def print_topic_registrations_simple(items, nodename=None):
    global _topics

    title = '------ Action Status Publishers '

    color = Fore.RESET
    print('{}{}'.format(title, '-' * (108 - len(title))))
    fmt = "{}{:45}{:18}{:30}{}" + Fore.RESET
    print(fmt.format(color,
                     'Topic',
                     'Message_Type',
                     'Node_Name',
                     'Node_Host'), end="\r\n")
    print('-' * 108)

    _topics = []
    sorted_topics = dict(sorted(items, key=lambda i: i[0]))
    for item in sorted_topics:
        regspecs = dict(items)[item]
        for regspec in regspecs:
            if not regspec['nodename'].endswith('_cli'):
                if nodename is None or nodename.lower() == regspec['nodename'].lower():
                    _topics.append(regspec['topic'])

                    if regspec['message_type'] is None:
                        msgtype = "Any"
                    else:
                        msgtype = regspec['message_type']

                    if 'has_publisher' in regspec.keys() and not regspec['has_publisher']:
                        color = Fore.YELLOW
                    else:
                        color = Fore.RESET

                    if is_action_topic(regspec['topic']):
                        print(fmt.format(color,
                                         regspec['topic'],
                                         msgtype,
                                         regspec['nodename'],
                                         regspec['owner_host']), end="\r\n")


def get_namespace(items):
    # Potential danger! Assumes that there should be only one namespace
    namespaces = []
    sorted_topics = dict(sorted(items, key=lambda i: i[0]))
    for item in sorted_topics:
        regspecs = dict(items)[item]
        for regspec in regspecs:
            if is_action_service(regspec['topic']):
                nms = regspec['topic'].split('/')[1]
                if nms not in namespaces:
                    namespaces.append(nms)
    if len(namespaces) != 1:
        logging.warning("More than one namespace: {}".format(namespaces))
    return namespaces[0]


def print_actions(items):
    global _srv_topics

    title = '------ Actions '
    print('{}{}'.format(title, '-' * (108 - len(title))))
    fmt = "{:45}{:30}{}"
    print(fmt.format('Action',
                     'Node_Name',
                     'Node_Host'), end="\r\n")
    print('-' * 108)

    _srv_topics = []
    sorted_topics = dict(sorted(items, key=lambda i: i[0]))
    for item in sorted_topics:
        regspecs = dict(items)[item]
        for regspec in regspecs:
            act_name = is_action_service(regspec['topic'])
            if act_name:
                if act_name not in _srv_topics:
                    _srv_topics.append(act_name)
                    print(fmt.format(act_name,
                                     regspec['nodename'],
                                     regspec['owner_host']), end="\r\n")


def completer(text, state):
    global _srv_topics
    options = [i for i in _srv_topics if i.startswith(text)]
    if state < len(options):
        return options[state]
    else:
        return None


def action_status_cb(_topic, msg: b9py.Message):
    if args['verbose']:
        print("seq: {}, {}".format(msg.sequence, msg.data))
    else:
        print(msg)


if __name__ == "__main__":
    print("\nB9 Action Tool", end="\r\n")

    # Control-C handler
    signal.signal(signal.SIGINT, sigint_handler)

    ap = argparse.ArgumentParser()
    subparsers = ap.add_subparsers(dest='command')
    subparsers.required = True

    #  subparser for list
    parser_list = subparsers.add_parser('list')
    parser_list.add_argument('-n', '--nodename', type=str, default=None, help='filter by node name.')
    parser_list.add_argument('-v', '--verbose', action='store_false', help='display in verbose mode')

    #  subparser for start
    parser_start = subparsers.add_parser('start')
    parser_start.add_argument("topic", type=str, default="?", nargs='?', help="action topic.")
    parser_start.add_argument("data", default='?', nargs='?', help="message data.", type=yaml_load)
    parser_start.add_argument('-v', '--verbose', action='store_false', help='display in verbose mode')

    #  subparser for stop
    parser_stop = subparsers.add_parser('stop')
    parser_stop.add_argument("topic", type=str, default="?", nargs='?', help="action topic.")
    parser_stop.add_argument("data", default='?', nargs='?', help="message data.", type=yaml_load)
    parser_stop.add_argument('-v', '--verbose', action='store_false', help='display in verbose mode')

    #  subparser for pause
    parser_pause = subparsers.add_parser('pause')
    parser_pause.add_argument("topic", type=str, default="?", nargs='?', help="action topic.")
    parser_pause.add_argument("data", default='?', nargs='?', help="message data.", type=yaml_load)
    parser_pause.add_argument('-v', '--verbose', action='store_false', help='display in verbose mode')

    #  subparser for update
    parser_pause = subparsers.add_parser('update')
    parser_pause.add_argument("topic", type=str, default="?", nargs='?', help="action topic.")
    parser_pause.add_argument("data", default='?', nargs='?', help="message data.", type=yaml_load)
    parser_pause.add_argument('-v', '--verbose', action='store_false', help='display in verbose mode')

    #  subparser for monitor
    parser_mon = subparsers.add_parser('monitor')
    parser_mon.add_argument("topic", type=str, default="?", nargs='?', help="action topic.")
    parser_mon.add_argument('-v', '--verbose', action='store_false', help='display in verbose mode')

    args = vars(ap.parse_args())

    broker_uri = os.environ.get('B9_BROKER')
    if broker_uri is None:
        broker_uri = 'localhost'
        print("B9 broker URI is unspecified. Using localhost.", end="\r\n")

    # Init B9 core
    b9 = b9py.B9('b9action_cli', broker_uri)
#    b9.start_logger(level=logging.INFO)
    print(end="\r\n")

    # Setup for optional topic autocompletion
    if sys.platform == 'darwin':
        # Apple uses libedit.
        readline.parse_and_bind("bind -e")
        readline.parse_and_bind("bind '\t' rl_complete")
    else:
        # Some tweaks for linux
        readline.parse_and_bind('tab: complete')
        readline.set_completer_delims(' \t\n`~!@#$%^&*()-=+[{]}\\|;:\'",<>?')
    readline.set_completer(completer)

    client = b9py.ServiceClient('b9service', None, 'broker/registration/topic',
                                None, 5555, broker_uri)
    stat = client.connect()
    if stat.is_successful:
        # List
        if args['command'].lower() == 'list':
            result = client.call_service(b9py.MessageFactory.create_srv_list_message())
            if not result.is_successful:
                print("Registration service has failed. {}".format(result.status_type), end="\r\n")
                os.kill(os.getpid(), signal.SIGKILL)
            else:
                if args['verbose']:
                    print_service_registrations_simple(result.result_data.data.items(), args['nodename'])
                else:
                    print_service_registrations(result.result_data.data.items(), args['nodename'])

                print(end="\r\n")

            result = client.call_service(b9py.MessageFactory.create_topic_list_message())
            if not result.is_successful:
                print("Registration service has failed. {}".format(result.status_type), end="\r\n")
                os.kill(os.getpid(), signal.SIGKILL)
            else:
                if args['verbose']:
                    print_topic_registrations_simple(result.result_data.data.items(), args['nodename'])
                else:
                    print_topic_registrations(result.result_data.data.items(), args['nodename'])
            print(end="\r\n")

        # Start/Stop/Pause/Update
        elif args['command'].lower() in ['start', 'stop', 'pause', 'update']:
            topic = None
            call_data = None
            r = client.call_service(b9py.MessageFactory.create_srv_list_message())
            if not r.is_successful:
                failed(r)
            else:
                ns = get_namespace(r.result_data.data.items())
                if args['topic'] == '?':
                    # Topic not specified - show published and get a topic from the user
                    print_actions(r.result_data.data.items())
                    topic = input("\nTopic: ")
                else:
                    # Use the topic provided by the command line
                    topic = args['topic']

                if topic:
                    if args['data'] == '?':
                        # Data not specified - Get it from the user
                        cmd_data = yaml_load(input("Data: "))
                    else:
                        cmd_data = args['data']

                    print(end="\r\n")
                    print("Sending {} to action '{}'".format(str(cmd_data), topic), end='\r\n')
                    print(end="\r\n")

                    act_client = b9.create_action_client(topic, action_status_cb, ns)

                    if args['command'].lower() == "start":
                        result = act_client.start(cmd_data)
                    elif args['command'].lower() == "stop":
                        result = act_client.stop(cmd_data)
                    elif args['command'].lower() == "pause":
                        result = act_client.pause(cmd_data)
                    else:
                        result = act_client.update(cmd_data)

                    print(end="\r\n")
                    if result.is_successful:
                        print("Return from '{}': {}".format(topic, result.result_data.data), end='\r\n')
                        print(end="\r\n")
                        print("Status messages published by action '{}':".format(topic), end='\r\n')

                        signal.signal(signal.SIGINT, sigint_handler)
                        b9.spin_forever()

        # Monitor
        elif args['command'].lower() == 'monitor':
            topic = None
            call_data = None
            r = client.call_service(b9py.MessageFactory.create_srv_list_message())
            if not r.is_successful:
                failed(r)
            else:
                ns = get_namespace(r.result_data.data.items())
                if args['topic'] == '?':
                    # Topic not specified - show published and get a topic from the user
                    print_actions(r.result_data.data.items())
                    topic = input("\nTopic: ")
                    print(end="\r\n")
                else:
                    # Use the topic provided by the command line
                    topic = args['topic']

                if topic:
                    act_client = b9.create_action_client(topic, action_status_cb, ns)

                    print(end="\r\n")
                    print("Status messages published by action '{}':".format(topic), end='\r\n')

                    signal.signal(signal.SIGINT, sigint_handler)
                    b9.spin_forever()
    else:
        print("Unable to connect to Topic Name Service.", end="\r\n")
        print("Broker running?", end="\r\n")
